{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { useStripe, CardField } from \"@stripe/stripe-react-native\";\nimport baseUrlGenerator from \"../../generator/baseUrlGenerator\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { useEffect } from \"react\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar StripApp = function StripApp(props) {\n  var productName = props.productName,\n      productPrice = props.productPrice,\n      confirmOrder = props.confirmOrder;\n  console.log(productName, productPrice);\n\n  var _useStripe = useStripe(),\n      confirmPayment = _useStripe.confirmPayment;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      key = _useState2[0],\n      setKey = _useState2[1];\n\n  var handlePayment = function _callee() {\n    var data;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            data = {\n              amount: productPrice,\n              name: productName\n            };\n            fetch(baseUrlGenerator + \"payment/payment\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify(data)\n            }).then(function (res) {\n              return res.json();\n            }).then(function (res) {\n              console.log(\"RES\", res);\n              var intent = res;\n              setKey(intent.paymentIntent);\n              initPayment(intent.paymentIntent);\n              console.log(\"clientSecret\", intent.paymentIntent);\n            }).catch(function (error) {\n              console.log(\"ERROR\", error);\n            });\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var initPayment = function _callee2(keyy) {\n    var _await$confirmPayment, error;\n\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(confirmPayment(keyy, {\n              type: \"Card\",\n              billingDetails: {\n                name: productName\n              }\n            }));\n\n          case 2:\n            _await$confirmPayment = _context2.sent;\n            error = _await$confirmPayment.error;\n\n            if (error) {\n              Alert.alert(\"Error\", error.message);\n            } else {\n              Alert.alert(\"Payment Successful\");\n              confirmOrder();\n            }\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(CardField, {\n      postalCodeEnabled: false,\n      style: {\n        height: 50,\n        width: \"100%\",\n        backgroundColor: \"red\"\n      }\n    }), _jsx(TouchableOpacity, {\n      onPress: function onPress() {\n        return handlePayment();\n      },\n      children: _jsx(View, {\n        style: styles.paymentBtn,\n        children: _jsx(Text, {\n          style: styles.paymentText,\n          children: \"Pay\"\n        })\n      })\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n    margin: 20,\n    marginTop: 20\n  },\n  input: {\n    backgroundColor: \"#efefefef\",\n    borderRadius: 8,\n    fontSize: 20,\n    height: 50,\n    padding: 10\n  },\n  card: {\n    backgroundColor: \"#fefefefe\"\n  },\n  cardContainer: {\n    height: 50,\n    marginVertical: 30\n  },\n  paymentBtn: {\n    width: 100,\n    height: 50,\n    marginTop: 10,\n    backgroundColor: \"#1662A2\",\n    borderRadius: 10,\n    alignSelf: \"center\"\n  },\n  paymentText: {\n    alignSelf: \"center\",\n    fontSize: 18,\n    fontWeight: \"bold\",\n    marginTop: 12,\n    color: \"#fff\"\n  }\n});\nexport default StripApp;","map":{"version":3,"names":["React","useState","useStripe","CardField","baseUrlGenerator","AsyncStorage","useEffect","StripApp","props","productName","productPrice","confirmOrder","console","log","confirmPayment","key","setKey","handlePayment","data","amount","name","fetch","method","headers","body","JSON","stringify","then","res","json","intent","paymentIntent","initPayment","catch","error","keyy","type","billingDetails","Alert","alert","message","styles","container","height","width","backgroundColor","paymentBtn","paymentText","StyleSheet","create","flex","justifyContent","margin","marginTop","input","borderRadius","fontSize","padding","card","cardContainer","marginVertical","alignSelf","fontWeight","color"],"sources":["C:/Users/User/Desktop/myProjectNative/online-ecom-frontend/pages/Stripe/StripApp.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  View,\r\n  Text,\r\n  StyleSheet,\r\n  TextInput,\r\n  TouchableOpacity,\r\n  Button,\r\n  Alert,\r\n} from \"react-native\";\r\nimport { useStripe, CardField } from \"@stripe/stripe-react-native\";\r\nimport baseUrlGenerator from \"../../generator/baseUrlGenerator\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst StripApp = (props) => {\r\n  const { productName, productPrice, confirmOrder } = props;\r\n  console.log(productName, productPrice);\r\n  const { confirmPayment } = useStripe();\r\n  const [key, setKey] = useState(\"\");\r\n\r\n  const handlePayment = async () => {\r\n    const data = {\r\n      amount: productPrice,\r\n      name: productName,\r\n    };\r\n    fetch(`${baseUrlGenerator}payment/payment`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(data),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        console.log(\"RES\", res);\r\n        const intent = res;\r\n        setKey(intent.paymentIntent);\r\n        initPayment(intent.paymentIntent);\r\n        console.log(\"clientSecret\", intent.paymentIntent);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"ERROR\", error);\r\n      });\r\n  };\r\n\r\n  const initPayment = async (keyy) => {\r\n    const { error } = await confirmPayment(keyy, {\r\n      type: \"Card\",\r\n      billingDetails: {\r\n        name: productName,\r\n      },\r\n    });\r\n    if (error) {\r\n      Alert.alert(\"Error\", error.message);\r\n    } else {\r\n      Alert.alert(\"Payment Successful\");\r\n      confirmOrder();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <CardField\r\n        postalCodeEnabled={false}\r\n        style={{\r\n          height: 50,\r\n          width: \"100%\",\r\n          backgroundColor: \"red\",\r\n        }}\r\n      />\r\n\r\n      <TouchableOpacity onPress={() => handlePayment()}>\r\n        <View style={styles.paymentBtn}>\r\n          <Text style={styles.paymentText}>Pay</Text>\r\n        </View>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n    margin: 20,\r\n    marginTop: 20,\r\n  },\r\n\r\n  input: {\r\n    backgroundColor: \"#efefefef\",\r\n    borderRadius: 8,\r\n    fontSize: 20,\r\n    height: 50,\r\n    padding: 10,\r\n  },\r\n\r\n  card: {\r\n    backgroundColor: \"#fefefefe\",\r\n  },\r\n\r\n  cardContainer: {\r\n    height: 50,\r\n    marginVertical: 30,\r\n  },\r\n\r\n  paymentBtn: {\r\n    width: 100,\r\n    height: 50,\r\n    marginTop: 10,\r\n    backgroundColor: \"#1662A2\",\r\n    borderRadius: 10,\r\n    alignSelf: \"center\",\r\n  },\r\n\r\n  paymentText: {\r\n    alignSelf: \"center\",\r\n    fontSize: 18,\r\n    fontWeight: \"bold\",\r\n    marginTop: 12,\r\n    color: \"#fff\",\r\n  },\r\n});\r\n\r\nexport default StripApp;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}